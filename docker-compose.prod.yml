# MySQL Container + REST API Container + React Container for production.
# Run without rebuilding images:  docker-compose -f docker-compose.prod.yml up -d
# Run with rebuilding images:     docker-compose -f docker-compose.prod.yml up -d --build
# Stop and delete containers:     docker-compose down

services:
  # vacation database (MySQL) service:
  vacation-database-service:
    # Image name to create from Dockerfile:
    image: ilanmoroz/vacation-database-image:1.0

    # Build the image (if not exists) from specified Dockerfile location:
    build: ./DataBase

    # Container name:
    container_name: vacation-database-container

    # Port binding (host:container):
    ports:
      - 3307:3307

    # Environment variables needed by MySQL:
    environment:
      MYSQL_HOST: localhost # Internally for the container.
      MYSQL_DATABASE: vacation
      MYSQL_PASSWORD: 12345678
      MYSQL_ROOT_PASSWORD: 12345678 # Needed by MySQL image.

    # On crash - restart container, unless manually stopped:
    restart: unless-stopped

    # Database volumes:
    volumes:
      # Named Volume for persisting MySQL from container to host:
      - vacation:/var/lib/mysql

  # -----------------------------------------------------------------------

  # vacation backend service:
  vacation-backend-service:
    # Image name to create from Dockerfile:
    image: ilanmoroz/vacation-backend-image:1.0

    # Build the image (if not exists) from specified Dockerfile.prod location:
    build:
      context: ./BackEnd
      dockerfile: Dockerfile.prod

    # Container name:
    container_name: vacation-backend-container

    # Port binding (host:container):
    ports:
      - 8080:8080

    # Environment variables needed by this service:
    environment:
      PORT: 8080
      MYSQL_HOST: vacation-database-service # Above database service name is the host name.
      MYSQL_DATABASE: vacation
      MYSQL_PASSWORD: 12345678

    # On crash - restart container, unless manually stopped:
    restart: unless-stopped

    # On which service we're depending on (starting/stopping order):
    depends_on:
      - vacation-database-service

  # -----------------------------------------------------------------------

  # vacation frontend service:
  vacation-frontend-service:
    # Image name to create from Dockerfile:
    image: ilanmoroz/vacation-frontend-image:1.0

    # Build the image (if not exists) from specified Dockerfile.prod location:
    build:
      context: ./FrontEnd
      dockerfile: Dockerfile.prod

    # Container name:
    container_name: vacation-frontend-container

    # Port binding (host:container):
    ports:
      - 80:80 # Nginx exposing our site on port 80, and we're also want to expose frontend container on port 80.

    # On crash - restart container, unless manually stopped:
    restart: unless-stopped

    # On which service we're depending on (starting/stopping order):
    depends_on:
      - vacation-backend-service

# -----------------------------------------------------------------------

# Named Volume list:
volumes:
  vacation:
